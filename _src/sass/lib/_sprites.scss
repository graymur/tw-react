//@import "sprite/*.png";

$sprites: sprite-map("sprite/*.png", $spacing: 5px);
$sprites-retina: sprite-map("sprite2x/*.png", $spacing: 5px);


@mixin s($name, $map: $sprites) {
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name);
  background-repeat: no-repeat;
  background-color: transparent;
  height: image-height(sprite-file($sprites, $name));
  width: image-width(sprite-file($sprites, $name));
  @media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 2) {
    // Workaround for https://gist.github.com/2140082
    @if (sprite-position($sprites, $name) != sprite-position($sprites-retina, $name)) {
      $ypos: round(nth(sprite-position($sprites-retina, $name), 2) / 2);
      background-position: 0 $ypos;
    }
    // Hard coded width of the normal sprite image. There must be a smarter way to do this.
    @include background-size(45px, auto);
    background-image: sprite-url($sprites-retina);
  }
}

@mixin sprite-bg($name, $map: $sprites) {
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name);
  @media (-webkit-min-device-pixel-ratio: 2), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 2) {
    // Workaround for https://gist.github.com/2140082
    @if (sprite-position($sprites, $name) != sprite-position($sprites-retina, $name)) {
      $ypos: round(nth(sprite-position($sprites-retina, $name), 2) / 2);
      background-position: 0 $ypos;
    }
    background-image: sprite-url($sprites-retina);
  }
}